# Read sgf/LICENSE.md file for copyright and licensing information.

$(eval DIR_ROOT?=$(subst /Makefile.mk.in,,$(lastword $(realpath $(foreach DIR,$(subst /, ,$(CURDIR)), $(eval DIR_ROOT_TEST=$(DIR_ROOT_TEST)/$(DIR))$(DIR_ROOT_TEST)/Makefile.mk.in)))))
PRJNAME        = sgf
LIB_NAME       = $(PRJNAME)
VERSION        = 0
SUBVERSION     = 0
EXTRAVERSION   = 0
LIB_VERSION    = $(VERSION).$(SUBVERSION).$(EXTRAVERSION)
LIB_SRC        = src
prefix         = @prefix@
exec_prefix    = @exec_prefix@
datarootdir    = @datarootdir@
PACKAGE_TARNAME= $(PRJNAME)
DIR_SYSCONF    = $(DESTDIR)@sysconfdir@
DIR_BIN        = $(DESTDIR)@bindir@
DIR_LIB        = $(DESTDIR)@libdir@
DIR_LOCALSTATE = $(DESTDIR)@localstatedir@
DIR_HEADERS    = $(DESTDIR)@includedir@
DIR_SHARE      = $(DESTDIR)@datarootdir@
DIR_DOC        = $(DESTDIR)@docdir@
DIR_MAN        = $(DESTDIR)@mandir@
LIB_PREFIX     = @LIB_PREFIX@
LIB_EXT        = @LIB_EXT@
CXX            = @CXX@
MKDIR_P        = @MKDIR_P@
INSTALL        = @INSTALL@
RANLIB         = @RANLIB@
GITID          = @GITID@
CTAGS          = @CTAGS@
GTAGS          = @GTAGS@
DIRS           = $(DIR_BUILD)
HAPI_HEADER    = include/$(LIB_NAME)/$(LIB_NAME).hxx
LD_SO_CONF     = $(DIR_LIB)/ld.so.conf
DO_@DO_TARGET@=1
override CXX_STANDARD=@CXX_STANDARD@
include $(DIR_ROOT)/_aux/mk/00_sanity.mk
include $(DIR_ROOT)/_aux/mk/10_basic.mk
include $(DIR_ROOT)/_aux/mk/20_term.mk
include $(DIR_ROOT)/_aux/mk/30_suffix.mk
include $(DIR_ROOT)/_aux/mk/50_wrapper.mk
include $(DIR_ROOT)/_aux/mk/60_flags.mk
EXTRA_COMPILER_DEBUG_FLAGS=@EXTRA_COMPILER_DEBUG_FLAGS@
EXTRA_COMPILER_OPTIMIZATION_FLAGS=@EXTRA_COMPILER_OPTIMIZATION_FLAGS@
EXTRA_INCLUDE_PATHS=@EXTRA_INCLUDE_PATHS@
EXTRA_LIBRARY_PATHS=@EXTRA_LIBRARY_PATHS@
override EXTRA_CXXFLAGS+=@EXTRA_CXXFLAGS@
override EXTRA_LXXFLAGS+=@EXTRA_LXXFLAGS@
override CXXFLAGS+= @DEFS@ -I$(DIR_ROOT) -I$(DIR_BUILD)
override LXXFLAGS+= -L. -shared @YAAL_LXXFLAGS@

include $(DIR_ROOT)/_aux/mk/80_func_lib.mk

$(eval $(call PREPARE_VARIABLES,$(LIB_NAME),$(LIB_SRC)))

LIBS_sgf = -lc -lyaal_hcore$(LIB_INFIX) -lyaal_tools$(LIB_INFIX)

-include $(DIR_ROOT)/local.mk

#-------------------------------------------------------------------

#	this is "rule" for linking libs

.SECONDEXPANSION:

$(LIB_PREFIX)%$(LIB_INFIX).$(LIB_SUFFIX): $$(OBJS_$$(*)) $$(DEPS_$$(*))
	@$(call msg,printf "%b" "Linking \`$(@)' ... $(BOLD)$(RED)";) \
	$(call invoke,$(LXX) $(LIBS) $(LXXFLAGS) @SONAME_FLAG@ -o $(@) \
			@START_GROUP@ $(OBJS_$(*)) @END_GROUP@ $(LIBS_$(*)) 2>&1 | tee -a make.log) ; $(call msg, printf "%b" "$(RS)";)
	@test -f $(@) || exit 1
ifeq ($(LIB_PREFIX),lib)
	@$(call invoke,$(AR) $(ARFLAGS) lib$(*)$(LIB_INFIX).$(LIB_ARCHIVE_SUFFIX) $(OBJS_$(*)) | tee -a make.log ) ; \
	$(call invoke,$(RANLIB) lib$(*)$(LIB_INFIX).$(LIB_ARCHIVE_SUFFIX))
endif # just to allow shared linking during the build
	@$(call invoke,ln -sf lib$(*)$(LIB_INFIX).so.$(RELEASE) lib$(*)$(LIB_INFIX).so) \
	$(call msg,&& printf "%b$(NL)" "done.$(CL)")

define INSTALL_TARGET
	$(call msg,printf "%b" "Installing \`$(LIB_PREFIX)$(1)$(LIB_INFIX).$(LIB_SUFFIX)' ... $(BOLD)$(RED)";) \
	$(call invoke,$(INSTALL) $(LIB_PREFIX)$(1)$(LIB_INFIX).$(LIB_SUFFIX) lib$(1)$(LIB_INFIX).$(LIB_ARCHIVE_SUFFIX) $(DIR_LIB)/ ) ; \
	$(call msg, printf "%b" "$(RS)" && ) \
	if [ "x$(LIB_PREFIX)" = "xlib" ] ; then \
		$(call invoke,ln -sf lib$(1)$(LIB_INFIX).so.$(RELEASE) $(DIR_LIB)/lib$(1)$(LIB_INFIX).so.$(VERSION).$(SUBVERSION) ) && \
		$(call invoke,ln -sf lib$(1)$(LIB_INFIX).so.$(VERSION).$(SUBVERSION) $(DIR_LIB)/lib$(1)$(LIB_INFIX).so.$(VERSION) ) && \
		$(call invoke,ln -sf lib$(1)$(LIB_INFIX).so.$(VERSION) $(DIR_LIB)/lib$(1)$(LIB_INFIX).so ) ; \
	fi && \
	$(call msg,printf "%b$(NL)" "done.$(CL)" && )
endef

define UNINSTALL_TARGET
	$(call msg,printf "%b" "Uninstalling \`$(LIB_PREFIX)$(1)$(LIB_INFIX).$(LIB_SUFFIX)' ... $(BOLD)$(RED)";) \
	$(call invoke,/bin/rm -f $(DIR_LIB)/$(LIB_PREFIX)$(1)$(LIB_INFIX).$(LIB_SUFFIX) $(DIR_LIB)/lib$(1)$(LIB_INFIX).$(LIB_ARCHIVE_SUFFIX) ) ; \
	$(call msg, printf "%b" "$(RS)" && ) \
	if [ "x$(LIB_PREFIX)" = "xlib" ] ; then \
		$(call invoke,/bin/rm -f $(DIR_LIB)/lib$(1)$(LIB_INFIX).so.$(VERSION).$(SUBVERSION) \
			$(DIR_LIB)/lib$(1)$(LIB_INFIX).so.$(VERSION) $(DIR_LIB)/lib$(1)$(LIB_INFIX).so ) ; \
	fi && \
	$(call msg,printf "%b$(NL)" "done.$(CL)" && )
endef

#------------------------------------------------------------------------

include $(DIR_ROOT)/_aux/mk/a0_target-default.mk

#phony targets
.PHONY: all bin clean clean-dep cov debug dep distclean doc install install-environment mrproper relassert reldeb release prof purge static stats tags test uninstall
.NOTPARALLEL: $(HAPI_HEADER) $(LD_SO_CONF)

$(TARGET): $(DIRS) $(TARGETS) $(HAPI_HEADER)

all: $(TARGET)

$(foreach IT,$(DIRS),$(eval $(call MAKE_DIR,$(IT))))

environment: $(DIRS)

install: all
	@$(call invoke,$(MKDIR_P) $(DIR_LIB) $(DIR_PKGCONFIG) $(DIR_SYSCONF) && ) \
	$(call INSTALL_TARGET,$(LIB_NAME)) \
	$(call invoke,$(INSTALL) -m644 $(DIR_ROOT)/sgfrc $(DIR_SYSCONF)/ && ) \
	$(call invoke,$(MKDIR_P) $(DIR_HEADERS) && /bin/cp -fRp $(DIR_BUILD)/include/$(LIB_NAME) $(DIR_HEADERS)/ && ) \
	$(call msg,printf "%b" "making cache ... " && ) \
	printf "%b\n" $(DIR_LIB) > $(DIR_LIB)/ld.so.conf && \
	/bin/cp -f $(DIR_ROOT)/_aux/mkcache $(DIR_LIB) && \
	cd $(DIR_LIB) && $(DIR_LIB)/mkcache --lib-dir=$(DIR_LIB) \
	$(call msg,&& printf "%b$(NL)" "done.$(CL)")

uninstall:
	@$(call msg,printf "%b" "Uninstalling the library ... " && ) \
	$(call UNINSTALL_TARGET,$(LIB_NAME)) \
	$(call invoke,/bin/rm -fr $(DIR_HEADERS)/$(LIB_NAME)) \
	$(call msg,&& printf "%b$(NL)" "done.$(CL)")

install-environment:
	@cd $(DIR_ROOT) && ./_aux/msh $(DESTDIR)$(prefix)

$(HAPI_HEADER): $(HDRS)
	@printf "%b" "Making headers ... " && \
	$(call invoke,$(DIR_ROOT)/_aux/mkheaders --lib-name=$(LIB_NAME) --dir-root="$(DIR_ROOT)" --dir-build="$(DIR_BUILD)" --headers="$(HDRS)" && ) \
	printf "%b$(NL)" "done.$(CL)$(BOLD)" && \
	printf "%b\n" "All OK!$(RS)";

clean-dep:
	@$(FIND) . -name '*.$(DS)' | xargs /bin/rm -f

clean: clean-dep
	@/bin/rm -f $(OBJS); \
	sh -c '. $(DIR_ROOT)/_aux/clean-lib.sh && clean .'

mrproper: clean
	@printf "%b" "Purging ... "; \
	/bin/rm -rf include make.log; \
	$(FIND) . \( -name .git -prune -name 'tags' -or -name '.depend' -or -name '*.a' \) -a ! -name .git \
| xargs /bin/rm -f; \
	printf "%b\n" "done."

include $(DIR_ROOT)/_aux/mk/b0_target-tools.mk

doc: $(SRCS) $(HDRS)
	@cd $(DIR_ROOT) && doxygen _aux/doxygenrc 2>&1 | grep 'is not documented'; \
	cat doc/doxygen.css >> doc/html/doxygen.css

stats:
	@cd $(DIR_ROOT) && ./_aux/stats $(DIR_ROOT)

flint:
	@flint -b _aux/flint.lnt hcore/*.$(SS) hconsole/*.$(SS) tools/*.$(SS) \
						dbwrapper/db_driver_loader.$(SS) dbwrapper/dbwrapper.$(SS) \
						dbwrapper/hdatabase.$(SS) dbwrapper/hrecordset.$(SS) \
						hdata/*.$(SS) \
| awk '{gsub(" \\(compare with line [^)]+\\)","");print}'|head -20

test: all
	@true

include $(DIR_ROOT)/_aux/mk/c0_deps.mk

# vim:ts=2
